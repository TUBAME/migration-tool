/*
 * CreateKeywordSearchFile.java
 * Created on 2013/06/28
 *
 * Copyright (C) 2011-2013 Nippon Telegraph and Telephone Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package tubame.portability.logic;

import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import tubame.knowhow.biz.logic.converter.PortabilityKnowhowConverter;
import tubame.knowhow.biz.model.generated.knowhow.Category;
import tubame.knowhow.biz.model.generated.knowhow.Chapter;
import tubame.knowhow.biz.model.generated.knowhow.CheckItem;
import tubame.knowhow.biz.model.generated.knowhow.ChildChapter;
import tubame.knowhow.biz.model.generated.knowhow.KnowhowInfomation;
import tubame.knowhow.biz.model.generated.knowhow.SearchInfomation;

import tubame.portability.exception.JbmException;
import tubame.portability.util.CsvUtil;
import tubame.portability.util.PluginUtil;
import tubame.portability.util.StringUtil;
import tubame.portability.util.resource.ApplicationPropertyUtil;
import tubame.portability.util.resource.MessageUtil;

/**
 * Make the generation of search keyword file.<br/>
 * Generation of search keyword file from know-how XML.<br/>
 */
public class CreateKeywordSearchFile {
    /**
     * Heading tag information list
     */
    private static List<Chapter> chapterList = null;

    /**
     * Map of the category list
     */
    private static Map<String, Category> categoryMap = null;

    /**
     * Map of know-how list
     */
    private static Map<String, KnowhowInfomation> knowhowMap = null;

    /**
     * Map of search information
     */
    private static Map<String, SearchInfomation> searchInfoMap = null;

    /**
     * Search convert files to (CSV format) from the know-how XML.<br/>
     * 
     * @param convert
     * @throws JbmException
     *             Portable study tool exception
     */
    public static void xmlToCsv(PortabilityKnowhowConverter convert)
            throws JbmException {
        List<String> csvData = null;
        BufferedWriter bw = null;

        // Map generation of each knowhow list
        convert.createProtabilityKnowhow();
        chapterList = convert.getChapterList();
        categoryMap = convert.getCategoryMap();
        knowhowMap = convert.getKnowhowMap();
        searchInfoMap = convert.getSearchInfoMap();

        try {
            String csvOutPath = PluginUtil.getPluginDir()
                    + ApplicationPropertyUtil.SEARCH_KEYWORD_FILE;
            bw = new BufferedWriter(new OutputStreamWriter(
                    new FileOutputStream(csvOutPath), CsvUtil.CHAR_SET));
            // Search keyword CSV data acquisition
            csvData = getKeyWordSearchData();
            for (String keyword : csvData) {
                // Write CSV
                bw.write(keyword);
                bw.newLine();
            }
        } catch (IOException e) {
            throw new JbmException(MessageUtil.ERR_CREATE_SEARCHINFO_CSV, e);
        } finally {
            if (bw != null) {
                try {
                    bw.flush();
                } catch (IOException e) {
                    // ignore
                }
                try {
                    bw.close();
                } catch (IOException e) {
                    // ignore
                }
            }
        }
        
    }

    /**
     * Get a search keyword information.<br/>
     * 
     * @return List<String>
     */
    private static List<String> getKeyWordSearchData() {
        List<String> searchList = new ArrayList<String>();

        // 1.ChapterList
        for (Chapter chapter : chapterList) {
            List<ChildChapter> children = chapter.getChildChapters();
            getChildrenKeyWordData(children, searchList);
        }
        return searchList;
    }

    /**
     * Generate the information of the second column Search Migration keyword
     * information.<br/>
     * Information of the first column is generated by the caller.<br/>
     * 
     * @param children
     *            List<ChildChapter>
     * @param searchList
     *            List<String>
     */
    private static void getChildrenKeyWordData(List<ChildChapter> children,
            List<String> searchList) {
        StringBuffer line = new StringBuffer();
        String childChapNo;
        BigInteger knowhowNo;
        BigInteger checkItemNo;

        // 2.ChildChapter
        for (ChildChapter childChapter : children) {
            // No (heading No. Category No)
            childChapNo = childChapter.getChildCapterNo();

            String cateRefKey = childChapter.getChapterCategoryRefKey();
            // 3.CategoryList
            for (Map.Entry<String, Category> category : categoryMap.entrySet()) {

                // Mapping and determination of CategoryList ChapterList
                String categoryId = category.getKey();
                if (cateRefKey.equals(categoryId)) {
                    for (String knowhowRefKey : category.getValue()
                            .getKnowhowRefKeies()) {
                        // 4.KnowhowList
                        for (Map.Entry<String, KnowhowInfomation> knowhow : knowhowMap
                                .entrySet()) {

                            // Mapping and determination of KnowhowList
                            // CategoryList
                            String knowhowId = knowhow.getKey();
                            if (knowhowRefKey.equals(knowhowId)) {
                                // No (know-how No)
                                knowhowNo = knowhow.getValue().getKnowhowNo();

                                // 5.CheckItem
                                for (CheckItem checkItem : knowhow.getValue()
                                        .getCheckItems()) {
                                    // Decision of whether or not to perform
                                    // search
                                    if (!checkItem.isSearchExistance()) {
                                        // Skip search for non-implementation
                                        continue;
                                    }

                                    // No (check item No)
                                    checkItemNo = checkItem.getCheckItemNo();
                                    String searchRefKey = checkItem
                                            .getSearchRefKey();

                                    // Decision of whether or not search
                                    // information registration
                                    if (searchRefKey == null) {
                                        // Skip for searching information
                                        // without registration
                                        continue;
                                    }

                                    // 6.SearchInfomationList
                                    for (Map.Entry<String, SearchInfomation> search : searchInfoMap
                                            .entrySet()) {

                                        String searchInfoId = search.getKey();
                                        // Mapping and determination of
                                        // SearchInfomationList KnowhowList
                                        if (searchRefKey.equals(searchInfoId)) {
                                            /**
                                             * Stores the search information
                                             */
                                            // No
                                            line.append(childChapNo)
                                                    .append(StringUtil.HYPHEN)
                                                    .append(knowhowNo)
                                                    .append(StringUtil.HYPHEN)
                                                    .append(checkItemNo);
                                            line.append(StringUtil.CSV_DELIMITER);
                                            // Search for files
                                            line.append(search.getValue()
                                                    .getFileType());
                                            line.append(StringUtil.CSV_DELIMITER);
                                            // Search key 1
                                            line.append(escapeString(search
                                                    .getValue().getSearchKey1()));
                                            line.append(StringUtil.CSV_DELIMITER);
                                            // Search key 2
                                            line.append(escapeString(search
                                                    .getValue().getSearchKey2()));
                                            line.append(StringUtil.CSV_DELIMITER);
                                            // Expansion module name
                                            line.append(search.getValue()
                                                    .getPythonModule());
                                            line.append(StringUtil.CSV_DELIMITER);
                                            // Degree of difficulty
                                            line.append(checkItem
                                                    .getPortabilityDegree());
                                            line.append(StringUtil.CSV_DELIMITER);
                                            // Conversion flag (fixed)
                                            line.append("");
                                            line.append(StringUtil.CSV_DELIMITER);
                                            line.append(childChapNo);

                                            // Add to List
                                            searchList.add(line.toString());

                                            line.setLength(0);

                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            List<ChildChapter> moreChildren = childChapter.getChildChapters();
            if (moreChildren.size() > 0) {
                getChildrenKeyWordData(moreChildren, searchList);
            }
        }
    }

    private static String escapeString(final String original) {
        return "\"" + original.replaceAll("\"", "\"\"") + "\"";
    }
}
