/* Hello World in Pro*C, Oracle's embedded SQL environment */

#include <stdio.h>
#include <string.h>

#ifdef HAVE_TERMIOS_H
#include <termios.h>
#endif

#ifdef _WIN32
#include <windows.h>
#endif

#define INPUT_OK 0
#define NO_INPUT 1
#define TOO_LONG 2

EXEC SQL INCLUDE SQLCA;

void echon(FILE *f) {
#ifdef _WIN32
    if (f == stdin) {
        HANDLE h;
        DWORD mode;

        h = GetStdHandle(STD_INPUT_HANDLE);
        if (GetConsoleMode(h, &mode)) {
            mode |= ENABLE_ECHO_INPUT;
            SetConsoleMode(h, mode);
        }
    }
#elif defined HAVE_TERMIOS_H
    struct termios ts;

    tcgetattr(fileno(f), &ts);
    ts.c_lflag |= ECHO;
    tcsetattr(fileno(f), TCSANOW, &ts);
#else
    (void)f;
#endif
}

void echoff(FILE *f) {
#ifdef _WIN32
    if (f == stdin) {
        HANDLE h;
        DWORD mode;

        h = GetStdHandle(STD_INPUT_HANDLE);
        if (GetConsoleMode(h, &mode)) {
            mode &= ~ENABLE_ECHO_INPUT;
            SetConsoleMode(h, mode);
        }
    }
#elif defined HAVE_TERMIOS_H
    struct termios ts;

    tcgetattr(fileno(f), &ts);
    ts.c_lflag &= ~ECHO;
    tcsetattr(fileno(f), TCSANOW, &ts);
#else
    (void)f;
#endif
}

static int getLine(char *prompt, char *buff, size_t sz) {
    int ch, extra;

    // Get line with buffer overrun protection.
    if (prompt != NULL) {
        printf ("%s", prompt);
        fflush (stdout);
    }

    if (fgets (buff, sz, stdin) == NULL)
        return NO_INPUT;

    // If it was too long, there'll be no newline. In that case, we flush
    // to end of line so that excess doesn't affect the next call.
    if (buff[strlen(buff)-1] != '\n') {
        extra = 0;
        while (((ch = getchar()) != '\n') && (ch != EOF))
            extra = 1;
        return (extra == 1) ? TOO_LONG : INPUT_OK;
    }

    // Otherwise remove newline and give string back to caller.
    buff[strlen(buff)-1] = '\0';
    return INPUT_OK;
}

int main() {
    EXEC SQL BEGIN DECLARE SECTION;
    int check;

    char sid[17];
    char user[31];
    char password[31];

    char hello[101];
    char version[101];
    EXEC SQL END DECLARE SECTION;


    check = getLine("Enter database sid: ", sid, sizeof(sid));
    if(check == NO_INPUT) {
        printf("\nNo database sid given\n");
        return 1;
    }
    if(check == TOO_LONG) {
        printf("\nDatabase sid too long\n");
        return 1;
    }

    check = getLine("Enter username: ", user, sizeof(user));
    if(check == NO_INPUT) {
        printf("\nNo username given\n");
        return 1;
    }
    if(check == TOO_LONG) {
        printf("\nUsername too long\n");
        return 1;
    }

    echoff(stdin);
    check = getLine("Enter password: ", password, sizeof(password));
    if(check == NO_INPUT) {
        printf("\nNo password given\n");
        return 1;
    }
    if(check == TOO_LONG) {
        printf("\nPassword too long\n");
        return 1;
    }
    echon(stdin);


    EXEC SQL CONNECT :user IDENTIFIED BY :password USING :sid;

    EXEC SQL SELECT 'Hello World' INTO :hello FROM DUAL;
    EXEC SQL
           SELECT banner INTO :version FROM v$version WHERE banner LIKE 'Oracle%';

    printf("\n\n");
    printf("%s\n", hello);
    printf("%s\n", version);

    EXEC SQL COMMIT RELEASE;

    return 0;
}